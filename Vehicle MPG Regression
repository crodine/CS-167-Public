{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Notebook3_starter.ipynb",
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/crodine/CS-167-Public/blob/main/Vehicle%20MPG%20Regression\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "d7UdzZcBopb2"
      },
      "source": [
        "# Notebook #3\n",
        "**Due**: 9/28/21 by 11:59 pm.\n",
        "\n",
        "**Name**: Colin Rodine\n",
        "\n",
        "Be sure to start with the subset that you used in Notebook #2.\n",
        "- Only rows with 'Fuel Type' as `regular`.\n",
        "- the `displ`, `cylinders`, `year`, and `comb08` columns.\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 576
        },
        "id": "UBvdVwDkooMb",
        "outputId": "02699e1f-2039-4764-ac7d-ac2076fb8065"
      },
      "source": [
        "import pandas\n",
        "import numpy\n",
        "from google.colab import drive \n",
        "drive.mount('/content/drive')\n",
        "data = pandas.read_csv('/content/drive/MyDrive/CS167/DATA/vehicles.csv')\n",
        "data.head()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounted at /content/drive\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/IPython/core/interactiveshell.py:2718: DtypeWarning: Columns (70,71,72,73,74,76,79) have mixed types.Specify dtype option on import or set low_memory=False.\n",
            "  interactivity=interactivity, compiler=compiler, result=result)\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>barrels08</th>\n",
              "      <th>barrelsA08</th>\n",
              "      <th>charge120</th>\n",
              "      <th>charge240</th>\n",
              "      <th>city08</th>\n",
              "      <th>city08U</th>\n",
              "      <th>cityA08</th>\n",
              "      <th>cityA08U</th>\n",
              "      <th>cityCD</th>\n",
              "      <th>cityE</th>\n",
              "      <th>cityUF</th>\n",
              "      <th>co2</th>\n",
              "      <th>co2A</th>\n",
              "      <th>co2TailpipeAGpm</th>\n",
              "      <th>co2TailpipeGpm</th>\n",
              "      <th>comb08</th>\n",
              "      <th>comb08U</th>\n",
              "      <th>combA08</th>\n",
              "      <th>combA08U</th>\n",
              "      <th>combE</th>\n",
              "      <th>combinedCD</th>\n",
              "      <th>combinedUF</th>\n",
              "      <th>cylinders</th>\n",
              "      <th>displ</th>\n",
              "      <th>drive</th>\n",
              "      <th>engId</th>\n",
              "      <th>eng_dscr</th>\n",
              "      <th>feScore</th>\n",
              "      <th>fuelCost08</th>\n",
              "      <th>fuelCostA08</th>\n",
              "      <th>fuelType</th>\n",
              "      <th>fuelType1</th>\n",
              "      <th>ghgScore</th>\n",
              "      <th>ghgScoreA</th>\n",
              "      <th>highway08</th>\n",
              "      <th>highway08U</th>\n",
              "      <th>highwayA08</th>\n",
              "      <th>highwayA08U</th>\n",
              "      <th>highwayCD</th>\n",
              "      <th>highwayE</th>\n",
              "      <th>...</th>\n",
              "      <th>id</th>\n",
              "      <th>lv2</th>\n",
              "      <th>lv4</th>\n",
              "      <th>make</th>\n",
              "      <th>model</th>\n",
              "      <th>mpgData</th>\n",
              "      <th>phevBlended</th>\n",
              "      <th>pv2</th>\n",
              "      <th>pv4</th>\n",
              "      <th>range</th>\n",
              "      <th>rangeCity</th>\n",
              "      <th>rangeCityA</th>\n",
              "      <th>rangeHwy</th>\n",
              "      <th>rangeHwyA</th>\n",
              "      <th>trany</th>\n",
              "      <th>UCity</th>\n",
              "      <th>UCityA</th>\n",
              "      <th>UHighway</th>\n",
              "      <th>UHighwayA</th>\n",
              "      <th>VClass</th>\n",
              "      <th>year</th>\n",
              "      <th>youSaveSpend</th>\n",
              "      <th>guzzler</th>\n",
              "      <th>trans_dscr</th>\n",
              "      <th>tCharger</th>\n",
              "      <th>sCharger</th>\n",
              "      <th>atvType</th>\n",
              "      <th>fuelType2</th>\n",
              "      <th>rangeA</th>\n",
              "      <th>evMotor</th>\n",
              "      <th>mfrCode</th>\n",
              "      <th>c240Dscr</th>\n",
              "      <th>charge240b</th>\n",
              "      <th>c240bDscr</th>\n",
              "      <th>createdOn</th>\n",
              "      <th>modifiedOn</th>\n",
              "      <th>startStop</th>\n",
              "      <th>phevCity</th>\n",
              "      <th>phevHwy</th>\n",
              "      <th>phevComb</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>15.695714</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>19</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>-1</td>\n",
              "      <td>-1</td>\n",
              "      <td>0.0</td>\n",
              "      <td>423.190476</td>\n",
              "      <td>21</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>Rear-Wheel Drive</td>\n",
              "      <td>9011</td>\n",
              "      <td>(FFS)</td>\n",
              "      <td>-1</td>\n",
              "      <td>1850</td>\n",
              "      <td>0</td>\n",
              "      <td>Regular</td>\n",
              "      <td>Regular Gasoline</td>\n",
              "      <td>-1</td>\n",
              "      <td>-1</td>\n",
              "      <td>25</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>Alfa Romeo</td>\n",
              "      <td>Spider Veloce 2000</td>\n",
              "      <td>Y</td>\n",
              "      <td>False</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>Manual 5-spd</td>\n",
              "      <td>23.3333</td>\n",
              "      <td>0.0</td>\n",
              "      <td>35.0000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>Two Seaters</td>\n",
              "      <td>1985</td>\n",
              "      <td>-2000</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Tue Jan 01 00:00:00 EST 2013</td>\n",
              "      <td>Tue Jan 01 00:00:00 EST 2013</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>29.964545</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>9</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>-1</td>\n",
              "      <td>-1</td>\n",
              "      <td>0.0</td>\n",
              "      <td>807.909091</td>\n",
              "      <td>11</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>12.0</td>\n",
              "      <td>4.9</td>\n",
              "      <td>Rear-Wheel Drive</td>\n",
              "      <td>22020</td>\n",
              "      <td>(GUZZLER)</td>\n",
              "      <td>-1</td>\n",
              "      <td>3500</td>\n",
              "      <td>0</td>\n",
              "      <td>Regular</td>\n",
              "      <td>Regular Gasoline</td>\n",
              "      <td>-1</td>\n",
              "      <td>-1</td>\n",
              "      <td>14</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>10</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>Ferrari</td>\n",
              "      <td>Testarossa</td>\n",
              "      <td>N</td>\n",
              "      <td>False</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>Manual 5-spd</td>\n",
              "      <td>11.0000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>19.0000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>Two Seaters</td>\n",
              "      <td>1985</td>\n",
              "      <td>-10250</td>\n",
              "      <td>T</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Tue Jan 01 00:00:00 EST 2013</td>\n",
              "      <td>Tue Jan 01 00:00:00 EST 2013</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>12.207778</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>23</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>-1</td>\n",
              "      <td>-1</td>\n",
              "      <td>0.0</td>\n",
              "      <td>329.148148</td>\n",
              "      <td>27</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>2.2</td>\n",
              "      <td>Front-Wheel Drive</td>\n",
              "      <td>2100</td>\n",
              "      <td>(FFS)</td>\n",
              "      <td>-1</td>\n",
              "      <td>1450</td>\n",
              "      <td>0</td>\n",
              "      <td>Regular</td>\n",
              "      <td>Regular Gasoline</td>\n",
              "      <td>-1</td>\n",
              "      <td>-1</td>\n",
              "      <td>33</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>100</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>Dodge</td>\n",
              "      <td>Charger</td>\n",
              "      <td>Y</td>\n",
              "      <td>False</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>Manual 5-spd</td>\n",
              "      <td>29.0000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>47.0000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>Subcompact Cars</td>\n",
              "      <td>1985</td>\n",
              "      <td>0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>SIL</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Tue Jan 01 00:00:00 EST 2013</td>\n",
              "      <td>Tue Jan 01 00:00:00 EST 2013</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>29.964545</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>10</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>-1</td>\n",
              "      <td>-1</td>\n",
              "      <td>0.0</td>\n",
              "      <td>807.909091</td>\n",
              "      <td>11</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>8.0</td>\n",
              "      <td>5.2</td>\n",
              "      <td>Rear-Wheel Drive</td>\n",
              "      <td>2850</td>\n",
              "      <td>NaN</td>\n",
              "      <td>-1</td>\n",
              "      <td>3500</td>\n",
              "      <td>0</td>\n",
              "      <td>Regular</td>\n",
              "      <td>Regular Gasoline</td>\n",
              "      <td>-1</td>\n",
              "      <td>-1</td>\n",
              "      <td>12</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>1000</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>Dodge</td>\n",
              "      <td>B150/B250 Wagon 2WD</td>\n",
              "      <td>N</td>\n",
              "      <td>False</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>Automatic 3-spd</td>\n",
              "      <td>12.2222</td>\n",
              "      <td>0.0</td>\n",
              "      <td>16.6667</td>\n",
              "      <td>0.0</td>\n",
              "      <td>Vans</td>\n",
              "      <td>1985</td>\n",
              "      <td>-10250</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Tue Jan 01 00:00:00 EST 2013</td>\n",
              "      <td>Tue Jan 01 00:00:00 EST 2013</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>17.347895</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>17</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>-1</td>\n",
              "      <td>-1</td>\n",
              "      <td>0.0</td>\n",
              "      <td>467.736842</td>\n",
              "      <td>19</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>2.2</td>\n",
              "      <td>4-Wheel or All-Wheel Drive</td>\n",
              "      <td>66031</td>\n",
              "      <td>(FFS,TRBO)</td>\n",
              "      <td>-1</td>\n",
              "      <td>2550</td>\n",
              "      <td>0</td>\n",
              "      <td>Premium</td>\n",
              "      <td>Premium Gasoline</td>\n",
              "      <td>-1</td>\n",
              "      <td>-1</td>\n",
              "      <td>23</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>10000</td>\n",
              "      <td>0</td>\n",
              "      <td>14</td>\n",
              "      <td>Subaru</td>\n",
              "      <td>Legacy AWD Turbo</td>\n",
              "      <td>N</td>\n",
              "      <td>False</td>\n",
              "      <td>0</td>\n",
              "      <td>90</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>Manual 5-spd</td>\n",
              "      <td>21.0000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>32.0000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>Compact Cars</td>\n",
              "      <td>1993</td>\n",
              "      <td>-5500</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>T</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Tue Jan 01 00:00:00 EST 2013</td>\n",
              "      <td>Tue Jan 01 00:00:00 EST 2013</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 83 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "   barrels08  barrelsA08  charge120  ...  phevCity  phevHwy  phevComb\n",
              "0  15.695714         0.0        0.0  ...         0        0         0\n",
              "1  29.964545         0.0        0.0  ...         0        0         0\n",
              "2  12.207778         0.0        0.0  ...         0        0         0\n",
              "3  29.964545         0.0        0.0  ...         0        0         0\n",
              "4  17.347895         0.0        0.0  ...         0        0         0\n",
              "\n",
              "[5 rows x 83 columns]"
            ]
          },
          "metadata": {},
          "execution_count": 3
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "owHEYyptpKEh",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 204
        },
        "outputId": "f3ec4a36-bcd2-4f41-e5d6-37d909a48fc1"
      },
      "source": [
        "# Make your subset here.\n",
        "subset1 = data[data['fuelType'] == 'Regular']\n",
        "subset2 = subset1[['year','cylinders','displ','comb08']]\n",
        "subset2.head()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>year</th>\n",
              "      <th>cylinders</th>\n",
              "      <th>displ</th>\n",
              "      <th>comb08</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1985</td>\n",
              "      <td>4.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>21</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1985</td>\n",
              "      <td>12.0</td>\n",
              "      <td>4.9</td>\n",
              "      <td>11</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1985</td>\n",
              "      <td>4.0</td>\n",
              "      <td>2.2</td>\n",
              "      <td>27</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1985</td>\n",
              "      <td>8.0</td>\n",
              "      <td>5.2</td>\n",
              "      <td>11</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>1993</td>\n",
              "      <td>4.0</td>\n",
              "      <td>1.8</td>\n",
              "      <td>22</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   year  cylinders  displ  comb08\n",
              "0  1985        4.0    2.0      21\n",
              "1  1985       12.0    4.9      11\n",
              "2  1985        4.0    2.2      27\n",
              "3  1985        8.0    5.2      11\n",
              "5  1993        4.0    1.8      22"
            ]
          },
          "metadata": {},
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "SMPEV7JXpSoL"
      },
      "source": [
        "## Exercise #1\n",
        "\n",
        "Modify your code from Notebook #2/class to use cross validation. \n",
        "- Don't forget that you're doing **regression**--pay attention to what you need to change to make this do regression rather than classification\n",
        "- make sure to implement an appropriate **regression metric** - you can use any of the ones we talked about in class, but code it up yourself. Avoid using for loops in your calculation, they're unnecesary.\n",
        "- The sample code uses the word 'classification' a lot in the name of things... make sure you use the word 'regression' instead if you write similar functions.\n",
        "- your code should be clear and readable.\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "zpXDrqQ-pSDI"
      },
      "source": [
        "#your code here\n",
        "clean_subset2 = subset2.dropna()\n",
        "\n",
        "# Build your function here\n",
        "def knn(car,train_data, k):\n",
        "  data = train_data.copy()\n",
        "  data['distance_to_new'] = numpy.sqrt(\n",
        "    (car['year']-data['year'])**2\n",
        "    +(car['cylinders']-data['cylinders'])**2\n",
        "    +(car['displ']-data['displ'])**2)\n",
        "  \n",
        "  sorted_data = data.sort_values(['distance_to_new']) \n",
        "  prediction = sorted_data.iloc[0:k]['comb08'].mean()\n",
        "  return prediction\n",
        "\n",
        "def classify_allkNN(test_data,train_data,k):\n",
        "  return test_data.apply(knn,args=(train_data,k),axis=1)\n",
        "\n",
        "\n",
        "def MAE(actual,predicted,n):\n",
        "    error = sum(actual - predicted)\n",
        "    abs_error = abs(error)\n",
        "    MeanAbsoluteError = abs_error/n\n",
        "    return MeanAbsoluteError"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "xE6kVhcpp-9t"
      },
      "source": [
        "# Exercise #2\n",
        "Use approximately the first 500 rows in the shuffled set as testing data. Feel free to use fewer examples in your testing set-- particulary if it takes a long time ro run on your computer (more than 1 min or so)."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Xw-zrwOdpQbw"
      },
      "source": [
        "#your code here\n",
        "shuffled_data = clean_subset2.sample(frac=1, random_state=41)\n",
        "test_data = shuffled_data.iloc[0:500]\n",
        "train_data = shuffled_data.iloc[500:]"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ROni5vQeqOUZ"
      },
      "source": [
        "## Exercise #3\n",
        "Test your model using several different values of k and **graphically show the results.**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "hs852PukqNlx",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 308
        },
        "outputId": "0f53938a-3e94-4838-f949-483a328d5f03"
      },
      "source": [
        "# your code here\n",
        "import matplotlib.pyplot as plt\n",
        "k_vals = [201,333,501,672,801,979,1200,1675,1801,2001,2301,3500,4500,5500,6500,7500,8500,10001,12001,15001]\n",
        "kNN_MAE = []\n",
        "\n",
        "for k in k_vals:\n",
        "    predictions = classify_allkNN(test_data,train_data,k)\n",
        "    current_MAE = MAE(test_data['comb08'],predictions,k)\n",
        "    kNN_MAE.append(current_MAE)\n",
        "#    print(kNN_MAE)\n",
        "\n",
        "\n",
        "plt.suptitle('Car Data KNN Comparisons',fontsize=18)\n",
        "plt.xlabel('k')\n",
        "plt.ylabel('Mean Absolute Error')\n",
        "plt.plot(k_vals,kNN_MAE,'ro-',label='k-NN')\n",
        "plt.legend(loc='upper center', shadow=True)\n",
        "plt.axis([0,15500,0,0.9])\n",
        "\n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "7BaT9zMmqXjB"
      },
      "source": [
        "## Exercise #4\n",
        "Run the code you wrote in Exercise #3 for different splits of the data -- varying the number of elements in the testing data and/or different values for the `random_state`. "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "gPY_7m_MqW19",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 308
        },
        "outputId": "83e36318-3a73-4053-de55-191c2a29c5e7"
      },
      "source": [
        "# Varying Shuffle\n",
        "shuffled_data = clean_subset2.sample(frac=1, random_state=12)\n",
        "test_data = shuffled_data.iloc[0:500]\n",
        "train_data = shuffled_data.iloc[500:]\n",
        "\n",
        "import matplotlib.pyplot as plt\n",
        "k_vals = [201,333,501,672,801,979,1200,1675,1801,2001,2301,3500,4500,5500,6500,7500,8500,10001,12001,15001]\n",
        "kNN_MAE = []\n",
        "\n",
        "for k in k_vals:\n",
        "    predictions = classify_allkNN(test_data,train_data,k)\n",
        "    current_MAE = MAE(test_data['comb08'],predictions,k)\n",
        "    kNN_MAE.append(current_MAE)\n",
        "#    print(kNN_MAE)\n",
        "\n",
        "\n",
        "plt.suptitle('Car Data KNN Comparisons',fontsize=18)\n",
        "plt.xlabel('k')\n",
        "plt.ylabel('Mean Absolute Error')\n",
        "plt.plot(k_vals,kNN_MAE,'ro-',label='k-NN')\n",
        "plt.legend(loc='upper center', shadow=True)\n",
        "plt.axis([0,15500,0,0.2])\n",
        "\n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAY4AAAEjCAYAAAAlhuZMAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAAgAElEQVR4nO3deZxT1f3/8debHVRUFhWRVRFFqyzj8q11r4orrUXF4oJVaa20VX+tG36tXytt3erSqhV3YXCpW9Fqqa2li60WUAqCItuAoCCIggqyfn5/nBMJmWQmGZJJMvN5Ph73keRu+eRO5n5yzzn3HJkZzjnnXLaaFDsA55xz5cUTh3POuZx44nDOOZcTTxzOOedy4onDOedcTjxxOOecy4knDudcyZNUJWliseNwgSeOEiGpjaRLJP1D0gpJ6yUtlfSipGGSmtVjLMMkWdK0XtJHkt6Q9FtJh+ThPY6QdJ2kHfIRc5r9Xxdjr0iz7DJJmyS9mnh/SRPj+vMktchmf/EzJI7RhRniMEkv5BC3JJ0q6XlJH0haJ+kTSf+SdJWkdtnuy7lCqbeTkctM0h7AH4A9gT8DvwCWAzsBXwceAvoAl9dzaHcCkwg/MLYH9gVOBb4raRxwnpmtq+O+jwB+CjwMfLLVkWZJ0s+Aa4AJwKlmtjpllR7ARcAdOe76OkljzWzNVsTWBngCOAmYCYwGFgDbAgcD1wLfBA6s63uUsd6A361cIjxxFJmk1sALQE/gW2b2TMoqN0o6ADggj++5nZl9msWq/zCzp1K2vQR4APg2sIpwki15kkRIhCOAJ4Gz0yS9NcB84BpJD2Z5jAAmAxXAJYSkX1e/JSSNW4ArzGxT0rI7JXUCfrAV+y8rkpoDTc3sCzNbW+x4XBIz86mIE+FEYMAvc9jmWMIv03mEk90nwJ+Aw9OsOxGoIiSmp4AV4c9e4/6HxZgGZ1jeApgLbAC6J83fC7gbmAF8CqwGpgAXpGz/cNx/6nRdXL4rcCswFfgY+ILwC/wKwokkm2N0XdxnBeEH0pj4ejTQJMNx+gw4Ja73s0z7S5p3RJz3E0Ly+ARon7KdAS9kEe9+cd1/A8rhu7Af8CzwUdJxujz1OCUd8/bx+fL4N3oO2CWuMxx4O+7nHWBQyj66J/5OwJnAtLjuwjivWcr6WX0fUo7vPsCvgEXARuCIuLwKmJiyzVeBl4AlMY7FwIvAwWniHgMsBdYSvrs/B9pkiKF3XL4orv9f4IQ0MZ8D/Cf+3T8n/D9WAh3r8xxSjMmvOIpvcHwcncM2w4B2wKOEL3dn4ALgL5KONLN/pKy/LfA34FVgJKEIrM7MbJ2kMYSipuOAe+OiI4DDCFdQ84FtgNOA+yR1NLPEr/F7gbaEYpdLCScxCCciCCfDUwknxLlAc2Ag8EtCAvxuDuG2Ap4mJISbzOyKWj7beEn/BC6VdJeZLcniPQy4EniZcHwvyyG+hG/Fx/ssnpVqE+tb/gasB+4inEBPBm4E9geGptnsj4TvzLXAHsAPgWclPUNIHA8QTsI/BJ6StKeZzU/ZxymEv0PiPU8hfBe6AeclrXcE2X0fklUSfgzdSjiuH2T47L0Jx3sJoVhxKbAz8LX42V+L63UjnNy3JySx2TGuq4BDJB1tZhtSdv8I4ZjeQviRdAnwXDwWVXG/Z8f1/hGP5RqgC3AC4f9rWbq4G4xiZ67GPhF+Ka7McZtt0szbmXACfjFl/kTCP+ANOex/GDVcccR1To3r3FpLXE1iDCuB5knzr4vbd0+zTWvS/Oom/GrcCHTK4jMk9j83Pl5Ry/oTgc/i86/GbX6bZn/prjh+HF//iXDS7Za0TrZXHE/Hdfvn8Hd6lXDVt1/SPBGK4gw4Omn+w3HeXSn7+FWcvxBomzQ/cQX0i6R53eO8jclxxvd8Ni47OGl+Xb4PE0m5conLq0i64iAkNgMOrOUYVcb1TkiZf3Ocf36aGF5I/v4RiolTj8UzhKLaarE2hslbVRVfW8JlfNbM7PPEc0nbSmpP+Gd+HTgow2a31DnC9FbFx7YZ4moV42pHOKG2JRRd1MrM1ljijCS1kNROUgdChXYTQvFTtjoRTq7vZruBmf2LUIRzvqQ9c3ivKwi/UH+WwzYJieO4qsa1Ikk7ERLceDNLXKkRj9uo+PKbaTa9PeV14ur0UTP78r3jPlcBvdLs42UzeyPlPW9Kfc86fh9ut+pXAOmsjI+DJLVKt4KkJoSroTfN7MWUxb8ANpH+GN2R+P7FzzGJUIyZfCxWAm2AE2P9WaPiiaP4VgHb5bKBpN0lPS7pY0LSWU64ND4B2DHNJsvMLN8tl6qd6GISu0XSQsKleyKuxIksXWzVSGom6RpJ7xJ+wX8U9zMml/1E3yEUZzwh6dQctruK8Es668puM3sTeAwYKmm/HN4LNh/HbL8LPeLjjDTL3iacFHumWTYv5fXH8TG1OCqxrH2G/aeaGR+/fM86fh+yTfCPE1ogXg2skPSKpCti0VRCR0IxbbVjZGYrCMVg2RwjCN/B5GPxc0KLt+eAZZKelnSBpJz+l8uVJ47iewtoKyndF7gaSdsCfyeU+d9BqCM5DjgGeIVwskuV2uQ0HxInxllJ88YRyvdfJJSvD4xx3RaXZ/t9+xXhV/sbhDLzE+J+EvUTuXxv5xCKlJYSksfgmlcPzOwdQjPoUyVluopL5xrCFc6NOWwD4XsA0C/H7XJiZhszLMo0f2t+Tdfl+5DVd9XM1prZMYQr7F8Q4r8eeEdSuquIXNR6LMxsNqGJ/ImEuo5uwH3x/XffyvcveV45XnxPEyoQLyD8eqrN0YRWR98xs4eSF0i6If/hVRdvkDub8A82Ic7bgdCUdIyZfS9l/a+n2U1NFcBnA383syEp+9mjLvGa2VxJhxPKzx+TJDP7XRab/pTQ7PjGuG027zVf0j3AjyQdkUOYzxAqWc+X9FByUUkGiSuEfdIs24twUk73yzkf9k4zr098nAd1+j7UiZn9h1D5jaQuwJvADYQ6l2WEK/Jqx0jSjoRizKlb8d5rCUnxxbjPEwj3Y10GXFzX/ZYDv+IovvsJv9p/LGlQuhUkDZD0/fgy8WtIKescS+b6jbyJ9508TLjEv9fMFtQSVydCUkz1WXxMdyf0xjT72YbQAqtOzGwe4crjfWCcpNOz2OZ9wlXd4YSrnmzdQCh6uqm2FZPe67+EorivAr9IV24uaRdJP4/rfwj8CzhZ0r5J64hQzAbh5FkIx0jqn/KeiZtTn4uPuX4fchLrvFItIiSLdgAW7oN5HugnaWDKulcSzn91OkYZ3j9R79Pg7+73K44iM7PVkk4i/FJ5TtKfCM0MPyKU0R5JKIpKnIT+SSizv1VSd8I/S1/Cr/TpwFfyGN6hseJRbHnneEdgLKGZYuJzfBpjP0vSGsId590ITWfnU72s/LX4eKOkSkJdxltm9hbhfpPvSnqCUI69M6Gu4qOt+TBmNi9eBUwkJI8mZvZ4LZvdSGimmvUNmGa2XNLN5F5J/j1Cuf8VhErXp9l85/iBhGM/PWn9HxGa4/5DUqJp7EmE78s4M/tLju+frf8Cr8T3/AAYROjhYIyZ/Rvq9H3I1TXxx1Kiqa8ITZH3YsuEfTWheOw5SXcTii4PA84gFPk+Usf3/5OkTwiNC94DdmBza8QxNWzXMBS7WZdPYSK00LiUkBg+JrQjX0pIKGeTdEMXoX7hj3G9TwknwkOJTS5T9jsRqMoxlmFseWPehvhebxLubv5qhu06EK6g3ickgunAhUn7OyJl/csJRRvr2fIGwDaE5pIL4n5mE34hHh3XG5bFZ7iOlOazScu6E5p3bgC+nXScPsuwr0uTjkXG5rhp/p7vk2Vz3KTtRLin4wVCIlhPuMHsVUJC2SFl/f0Jv/JXEG5We5sabgBM836Jz1DtmFK9CWz3xN+JzTcAriWcOK8nqXltrt8HamienSGWIwg3wVYRKt5XEFoVXkBKU25CQ4IxwIfAuvidq+kGwGoxpHn/C9l8H8k6QgJ9ETiyPs8bxZoUD4JzztUoXuHOB/7PzK4rajCuqLyOwznnXE48cTjnnMuJJw7nnHM58ToO55xzOfErDueccznxxOGccy4nnjicc87lxBOHc865nHjicM45lxNPHM4553JS0MQhaaCkWZLmSLoyzfLLJM2UNE3SX5IHYZF0rqTZcTo3af4ASdPjPu9sjKNvOedcMRXsPg5JTQmjeR1D6MF1EnCmmc1MWudI4HULPcReROj07AxJ7YDJhCFCDZgCDDCzjyX9hzDe8OuETsXuNLOXCvIhnHPOVVPIK44DgTlmNs/M1hGGetxivAkz+6uZJUb8eg3YLT4/jjCu8Qoz+5jQC+XA2Jd/WzN7zULGexT4RgE/g3POuRSFHI+jM6G75YRF1DzQ0PlA4soh3bad47QozfxqJA0njKPANttsM2CvvfbKJXbnnGv0pkyZstzMOqbOL4mBnCSdRSiWOjxf+zSz0cBogIqKCps8eXK+du2cc42CpAXp5heyqGox0CXp9W5x3hbi+MMjgVMsjOFb07aL2VyclXGfzjnnCqeQiWMS0EtSD0ktgCHA+OQVJPUD7iUkjQ+TFk0AjpW0YxxU/lhggpl9AKySdHBsTXUO8PsCfgbnnHMpClZUZWYbJI0gJIGmwINmNkPS9cBkMxtPGB50W+B3sVXtQjM7xcxWSPoZIfkAXG9mK+Lz7xOGwWxNqBPxFlXOOVePGkW36l7H4Wqzbt065s6dy+rVq2tfucy1adOG3XffnRYtWhQ7FFfiJE0xs4rU+SVROe5csc2dO5cddtiB3r1706RJw+1QYdOmTSxdupTZs2ez9957N+jP6grHvzXOAatXr2bnnXdu8CfSJk2asPPOO7NmzRoqKyv57LPPih2SK0MN+7/EuRw09KSR0KRJEyTxySef8PLLLxc7HFeGGsd/inOumrZt27Js2bJih+HKkCcO50pEVVUV++67b43rDBs2jM6dO7N2bbjlafny5XTv3v3L7SXx61//+sv1R4wYwcMPP5x2X94/qKsrTxzO1UVlJXTvDk2ahMfKynp766ZNm/Lggw+mXbbTTjtxxx13sG7dunqLxzU+njicy1VlJQwfDgsWgFl4HD48r8lj3rx59OvXj0mTJlVbdskll3DbbbexYcOGass6duzI0UcfzSOPPJK3WJxL5c1xnUt1ySUwdWrm5a+9BmvXbjlv9Wo4/3y477702/TtC7ffntXbz5o1iyFDhvDwww+z//77V1vetWtXvva1rzFmzBhOPvnkasuvuOIKjj/+eL7zne9k9X7O5cqvOJzLVWrSqG1+DpYtW8agQYOorKxMmzQSrrrqKm6++WY2bdpUbVnPnj056KCDGDdu3FbH41w6fsXhXKrargy6dw/FU6m6dYOJE7fqrbfffnu6du3KP//5T/r06cN5553Hm2++ya677sqLL7745Xq9evWib9++PPnkk2n3c/XVVzN48GAOPzxvHU479yVPHM7latSoUKeR3D1JmzZh/lZq0aIFzz77LMcddxzbbrstDz30UMZ1R44cyYknnph22V577UWfPn14/vnnOeCAA7Y6LueSeVGVc7kaOhRGjw5XGFJ4HD06zM+DbbbZhhdeeIHbbruN8ePHZ1xvn332oX///hmXjxw5kkWLFmVc7lxdeSeHzgFTpkxhwIABxQ6j3kyZMoUZM2bwxRdfMHz48GKH40pUpk4O/YrDOedcTjxxOOecy4knDueidE1bG6LG8jld4XjicI4wuNGSJUsa/El106ZNLFmyhPXr1xc7FFfGvDmuc8Duu+/OzJkzef/99xt853/r169n4cKFbNq0iaZNmxY7HFeGCpo4JA0E7iCMOX6/mf0yZflhwO3AfsAQM3sqzj8SuC1p1b3i8uckPQwcDqyMy4aZWQ39QzhXuxYtWtClSxfGjRtH8+bNadmyZbFDKigzY+XKlfTr16/YobgyVLDEIakpcBdwDLAImCRpvJnNTFpt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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "aNkAjB3Wqvcb",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 308
        },
        "outputId": "6f5d6383-746c-4b08-d201-f1dd9b0277ad"
      },
      "source": [
        "# Varying test/training data\n",
        "shuffled_data = clean_subset2.sample(frac=1, random_state=41)\n",
        "test_data = shuffled_data.iloc[0:750]\n",
        "train_data = shuffled_data.iloc[750:]\n",
        "\n",
        "import matplotlib.pyplot as plt\n",
        "k_vals = [201,333,501,672,801,979,1200,1675,1801,2001,2301,3500,4500,5500,6500,7500,8500,10001,12001,15001]\n",
        "kNN_MAE = []\n",
        "\n",
        "for k in k_vals:\n",
        "    predictions = classify_allkNN(test_data,train_data,k)\n",
        "    current_MAE = MAE(test_data['comb08'],predictions,k)\n",
        "    kNN_MAE.append(current_MAE)\n",
        "#    print(kNN_MAE)\n",
        "\n",
        "\n",
        "plt.suptitle('Car Data KNN Comparisons',fontsize=18)\n",
        "plt.xlabel('k')\n",
        "plt.ylabel('Mean Absolute Error')\n",
        "plt.plot(k_vals,kNN_MAE,'ro-',label='k-NN')\n",
        "plt.legend(loc='upper center', shadow=True)\n",
        "plt.axis([0,15500,0,0.9])\n",
        "\n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "9EPSEIosqkj1"
      },
      "source": [
        "# Exercise #5\n",
        "What conclusions can you draw about the best number for k for the kNN algorithm for this dataset? Use a text cell to explain your conclusions in a couple sentences. "
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "z1AL84UJqtJ1"
      },
      "source": [
        "Based on the data and different shuffles/training and testing data, the ideal range for K is somewhere between 5,000 and 8,000. This is somewhat expected where you avoid the case of too few neighbors but also dont use too many to make the predictions over fit. the range I mentioned earlier had on average some of the lowest MAE, thus minimizing the difference between actual and predicted values, thus making it the best range for K. "
      ]
    }
  ]
}